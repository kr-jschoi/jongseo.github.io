# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:  # ✅ 빌드 작업 추가 (아티팩트 업로드 전용)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Build site (example)
        run: |
          mkdir -p public
          echo "<h1>Hello GitHub Pages</h1>" > public/index.html
          ls -la public  # Ensure the file is there
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: ./public
      
      - name: Check built files
        run: ls -la ./public || echo "❌ No built files found!"
        

  deploy:  # ✅ 배포 작업 (빌드 결과 다운로드 후 배포)
    needs: build  # 🔥 `build` 작업이 끝난 후 실행
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: my-artifact
          path: ./public
      
      - name: Check downloaded files
        run: |
          if [ -e ./public/index.html ]; then
            echo "✅ index.html found in public"
          else
            echo "❌ No files found in public"
          fi
        
  
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          artifact_name: my-artifact
          token: ${{ secrets.GITHUB_TOKEN }}